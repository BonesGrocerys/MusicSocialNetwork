// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicSocialNetwork.Database;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MusicSocialNetwork.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AlbumGenre", b =>
                {
                    b.Property<int>("AlbumsId")
                        .HasColumnType("integer");

                    b.Property<int>("GenresId")
                        .HasColumnType("integer");

                    b.HasKey("AlbumsId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("AlbumGenre");
                });

            modelBuilder.Entity("AlbumMusician", b =>
                {
                    b.Property<int>("AlbumsId")
                        .HasColumnType("integer");

                    b.Property<int>("MusiciansId")
                        .HasColumnType("integer");

                    b.HasKey("AlbumsId", "MusiciansId");

                    b.HasIndex("MusiciansId");

                    b.ToTable("AlbumMusician");
                });

            modelBuilder.Entity("MusicSocialNetwork.Entities.AddedPlaylists", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int>("PlaylistsId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("PlaylistsId");

                    b.ToTable("AddedPlaylists");
                });

            modelBuilder.Entity("MusicSocialNetwork.Entities.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AlbumTitle")
                        .HasColumnType("text")
                        .HasColumnName("album_title");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date")
                        .HasColumnName("release_date");

                    b.HasKey("Id");

                    b.ToTable("Album");
                });

            modelBuilder.Entity("MusicSocialNetwork.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("genre");

                    b.HasKey("Id");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("MusicSocialNetwork.Entities.Musician", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Nickname")
                        .HasColumnType("text")
                        .HasColumnName("nickname");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int?>("TrackId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("TrackId");

                    b.ToTable("Musicians");
                });

            modelBuilder.Entity("MusicSocialNetwork.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .HasColumnType("text")
                        .HasColumnName("Login");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("Password");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("MusicSocialNetwork.Entities.Playlists", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("MusicSocialNetwork.Entities.Publications", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("MusicianId")
                        .HasColumnType("integer");

                    b.Property<string>("PublicationsPhoto")
                        .HasColumnType("text")
                        .HasColumnName("PublicationsPhoto");

                    b.Property<string>("PublicationsText")
                        .HasColumnType("text")
                        .HasColumnName("PublicationsText");

                    b.HasKey("id");

                    b.HasIndex("MusicianId");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("MusicSocialNetwork.Entities.Subscriptions", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MusicianId")
                        .HasColumnType("integer");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("MusicianId");

                    b.HasIndex("PersonId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("MusicSocialNetwork.Entities.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<int>("AuditionsCount")
                        .HasColumnType("integer")
                        .HasColumnName("auditions_count");

                    b.Property<string>("Author")
                        .HasColumnType("text")
                        .HasColumnName("author");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("PersonTrack", b =>
                {
                    b.Property<int>("PersonAddedTracksId")
                        .HasColumnType("integer");

                    b.Property<int>("TracksId")
                        .HasColumnType("integer");

                    b.HasKey("PersonAddedTracksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("PersonTrack");
                });

            modelBuilder.Entity("PlaylistsTrack", b =>
                {
                    b.Property<int>("PlaylistsId")
                        .HasColumnType("integer");

                    b.Property<int>("TracksId")
                        .HasColumnType("integer");

                    b.HasKey("PlaylistsId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("PlaylistsTrack");
                });

            modelBuilder.Entity("AlbumGenre", b =>
                {
                    b.HasOne("MusicSocialNetwork.Entities.Album", null)
                        .WithMany()
                        .HasForeignKey("AlbumsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicSocialNetwork.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlbumMusician", b =>
                {
                    b.HasOne("MusicSocialNetwork.Entities.Album", null)
                        .WithMany()
                        .HasForeignKey("AlbumsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicSocialNetwork.Entities.Musician", null)
                        .WithMany()
                        .HasForeignKey("MusiciansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicSocialNetwork.Entities.AddedPlaylists", b =>
                {
                    b.HasOne("MusicSocialNetwork.Entities.Person", "Person")
                        .WithMany("MyPlaylists")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicSocialNetwork.Entities.Playlists", "Playlists")
                        .WithMany("AddedPlaylists")
                        .HasForeignKey("PlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Playlists");
                });

            modelBuilder.Entity("MusicSocialNetwork.Entities.Musician", b =>
                {
                    b.HasOne("MusicSocialNetwork.Entities.Person", "Person")
                        .WithMany("Musicians")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicSocialNetwork.Entities.Track", null)
                        .WithMany("Musicians")
                        .HasForeignKey("TrackId");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MusicSocialNetwork.Entities.Publications", b =>
                {
                    b.HasOne("MusicSocialNetwork.Entities.Musician", "Musician")
                        .WithMany("PublicationsList")
                        .HasForeignKey("MusicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Musician");
                });

            modelBuilder.Entity("MusicSocialNetwork.Entities.Subscriptions", b =>
                {
                    b.HasOne("MusicSocialNetwork.Entities.Musician", "Musician")
                        .WithMany("Subscribers")
                        .HasForeignKey("MusicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicSocialNetwork.Entities.Person", "Person")
                        .WithMany("SubscribeMusician")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Musician");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MusicSocialNetwork.Entities.Track", b =>
                {
                    b.HasOne("MusicSocialNetwork.Entities.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("PersonTrack", b =>
                {
                    b.HasOne("MusicSocialNetwork.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonAddedTracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicSocialNetwork.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlaylistsTrack", b =>
                {
                    b.HasOne("MusicSocialNetwork.Entities.Playlists", null)
                        .WithMany()
                        .HasForeignKey("PlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicSocialNetwork.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicSocialNetwork.Entities.Album", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("MusicSocialNetwork.Entities.Musician", b =>
                {
                    b.Navigation("PublicationsList");

                    b.Navigation("Subscribers");
                });

            modelBuilder.Entity("MusicSocialNetwork.Entities.Person", b =>
                {
                    b.Navigation("Musicians");

                    b.Navigation("MyPlaylists");

                    b.Navigation("SubscribeMusician");
                });

            modelBuilder.Entity("MusicSocialNetwork.Entities.Playlists", b =>
                {
                    b.Navigation("AddedPlaylists");
                });

            modelBuilder.Entity("MusicSocialNetwork.Entities.Track", b =>
                {
                    b.Navigation("Musicians");
                });
#pragma warning restore 612, 618
        }
    }
}
